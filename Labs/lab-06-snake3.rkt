#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 64 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 65 105 225 0 0 0
-1 -1 23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
43 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
45 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
          0 3281 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 185
(
 #"#reader(lib \"htdp-beginner-abbr-reader.ss\" \"lang\")((modname lab-"
 #"06-snake3) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #"
 #"(#t constructor repeating-decimal #f #t none #f ())))"
) 0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 14 #"2htdp/universe"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";; ================="
0 0 23 29 1 #"\n"
0 0 17 3 20 #";; ================="
0 0 23 29 1 #"\n"
0 0 17 3 13 #";; Constants:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 10 #"BOARD-SIZE"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 4 #")   "
0 0 17 3 35 #"; The board is 10 cells by 10 cells"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"CELL-PIXELS"
0 0 23 3 1 #" "
0 0 20 3 2 #"14"
0 0 23 3 26 #")                         "
0 0 17 3 18 #"; cells are square"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"BOARD-WIDTH"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 10 #"BOARD-SIZE"
0 0 23 3 1 #" "
0 0 14 3 11 #"CELL-PIXELS"
0 0 23 3 3 #")) "
0 0 17 3 1 #";"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"BOARD-HEIGHT"
0 0 23 3 1 #" "
0 0 14 3 11 #"BOARD-WIDTH"
0 0 23 3 16 #")               "
0 0 17 3 1 #";"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 10 #"GAME-SPEED"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 4 #"))  "
0 0 17 3 18 #"; ticks per second"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 23 29 1 #"\n"
0 0 17 3 53 #";; Images for the head and body elements of the snake"
0 0 23 29 1 #"\n"
0 0 17 3 27 #";; as well as for the food."
0 0 23 29 1 #"\n"
0 0 17 3 50 #";; (NOTE: in the first version you only use HEAD.)"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"HEAD"
0 0 23 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 11 #"CELL-PIXELS"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #") "
0 0 19 3 7 #"\"solid\""
0 0 23 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"BODY"
0 0 23 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 11 #"CELL-PIXELS"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #") "
0 0 19 3 7 #"\"solid\""
0 0 23 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"FOOD"
0 0 23 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 11 #"CELL-PIXELS"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #") "
0 0 19 3 7 #"\"solid\""
0 0 23 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"MTS"
0 0 23 3 2 #" ("
0 0 14 3 11 #"empty-scene"
0 0 23 3 1 #" "
0 0 14 3 11 #"BOARD-WIDTH"
0 0 23 3 1 #" "
0 0 14 3 12 #"BOARD-HEIGHT"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 9 #"GAME-OVER"
0 0 23 3 2 #" ("
0 0 14 3 13 #"overlay/align"
0 0 23 3 1 #" "
0 0 19 3 8 #"\"middle\""
0 0 23 3 1 #" "
0 0 19 3 8 #"\"middle\""
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                 ("
0 0 14 3 4 #"text"
0 0 23 3 1 #" "
0 0 19 3 12 #"\"Game Over.\""
0 0 23 3 1 #" "
0 0 20 3 2 #"24"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"white\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                 ("
0 0 14 3 6 #"square"
0 0 23 3 1 #" "
0 0 14 3 11 #"BOARD-WIDTH"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 23 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";; ================="
0 0 23 29 1 #"\n"
0 0 17 3 20 #";; ================="
0 0 23 29 1 #"\n"
0 0 17 3 20 #";; Data Definitions:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 24 #";; Direction is one of: "
0 0 23 29 1 #"\n"
0 0 17 3 9 #";;  - \"U\""
0 0 23 29 1 #"\n"
0 0 17 3 9 #";;  - \"D\""
0 0 23 29 1 #"\n"
0 0 17 3 9 #";;  - \"L\""
0 0 23 29 1 #"\n"
0 0 17 3 9 #";;  - \"R\""
0 0 23 29 1 #"\n"
0 0 17 3 51 #";; interp. the four directions a snake could travel"
0 0 23 29 1 #"\n"
0 0 17 3 42 #";; <Examples redundant for an enumeration>"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"fn-for-dir"
0 0 23 3 1 #" "
0 0 14 3 1 #"d"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"d"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"U\""
0 0 23 3 3 #") ("
0 0 14 3 3 #"..."
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"d"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"D\""
0 0 23 3 3 #") ("
0 0 14 3 3 #"..."
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"d"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"L\""
0 0 23 3 3 #") ("
0 0 14 3 3 #"..."
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"d"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"R\""
0 0 23 3 3 #") ("
0 0 14 3 3 #"..."
0 0 23 3 4 #")]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 4 #"cell"
0 0 23 3 2 #" ("
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 5 #"))   "
0 0 17 3 34 #"; c and r stand for column and row"
0 0 23 29 1 #"\n"
0 0 17 3 71
(
 #";; Cell is  (make-cell Integer[-1, BOARD-SIZE] Integer[-1, BOARD-SIZ"
 #"E])"
) 0 0 23 29 1 #"\n"
0 0 17 3 60
#";; interp. a cell position on the board from top-left corner"
0 0 23 29 1 #"\n"
0 0 17 3 71
(
 #";;         -1 and BOARD-SIZE are on the edges of the board and indic"
 #"ate"
) 0 0 23 29 1 #"\n"
0 0 17 3 52 #";;         \"going out of bounds\"/game-over condition"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"C1"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 2 #"-1"
0 0 23 3 1 #" "
0 0 20 3 2 #"-1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"C2"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 2 #"-1"
0 0 23 3 1 #" "
0 0 14 3 10 #"BOARD-SIZE"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"C3"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 14 3 10 #"BOARD-SIZE"
0 0 23 3 1 #" "
0 0 20 3 2 #"-1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"C4"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 14 3 10 #"BOARD-SIZE"
0 0 23 3 1 #" "
0 0 14 3 10 #"BOARD-SIZE"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"C5"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 10 #"BOARD-SIZE"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #") ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 10 #"BOARD-SIZE"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"fn-for-cell"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 6 #"cell-c"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #") ("
0 0 14 3 6 #"cell-c"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 18 #";; Body is one of:"
0 0 23 29 1 #"\n"
0 0 17 3 23 #";;  - (cons Cell empty)"
0 0 23 29 1 #"\n"
0 0 17 3 22 #";;  - (cons Cell Body)"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";; interp. snake body"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"B1"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"B2"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"B3"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"fn-for-body"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 4 #")) ("
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 11 #"fn-for-cell"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 4 #")))]"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 11 #"fn-for-cell"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 11 #"fn-for-cell"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 11 #"fn-for-body"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 6 #")))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 5 #"snake"
0 0 23 3 2 #" ("
0 0 14 3 3 #"dir"
0 0 23 3 1 #" "
0 0 14 3 4 #"head"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 17 3 44 #";; Snake is (make-snake Direction Cell Body)"
0 0 23 29 1 #"\n"
0 0 17 3 55 #";; interp. a snake with a head moving in some direction"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"S1"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"U\""
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"S2"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"L\""
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                             ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                             ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"S3"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"R\""
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                             ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"fn-for-snake"
0 0 23 3 1 #" "
0 0 14 3 2 #"sn"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 10 #"fn-for-dir"
0 0 23 3 2 #" ("
0 0 14 3 9 #"snake-dir"
0 0 23 3 1 #" "
0 0 14 3 2 #"sn"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 11 #"fn-for-cell"
0 0 23 3 2 #" ("
0 0 14 3 10 #"snake-head"
0 0 23 3 1 #" "
0 0 14 3 2 #"sn"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 11 #"fn-for-body"
0 0 23 3 2 #" ("
0 0 14 3 10 #"snake-body"
0 0 23 3 1 #" "
0 0 14 3 2 #"sn"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 4 #"food"
0 0 23 3 2 #" ("
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #";; Food is (make-cell Integer[-1, BOARD-SIZE] Integer[-1, BOARD-SIZE"
 #"])"
) 0 0 23 29 1 #"\n"
0 0 17 3 55 #";; interp. the location of a piece of food on the board"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"F1"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-food"
0 0 23 3 1 #" "
0 0 20 3 1 #"7"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"F2"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-food"
0 0 23 3 1 #" "
0 0 20 3 1 #"8"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"fn-for-food"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 6 #"food-f"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #") ("
0 0 14 3 6 #"food-f"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 4 #"game"
0 0 23 3 2 #" ("
0 0 14 3 5 #"snake"
0 0 23 3 1 #" "
0 0 14 3 4 #"food"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 71
(
 #";; Game is (make-game Snake Food) ; later on we will add fields to g"
 #"ame"
) 0 0 23 29 1 #"\n"
0 0 17 3 40 #";; interp. the game state with the snake"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"G1"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-game"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"D\""
0 0 23 29 1 #"\n"
0 0 23 3 35 #"                                  ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 35 #"                                  ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 9 #"make-food"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"G2"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-game"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"L\""
0 0 23 29 1 #"\n"
0 0 23 3 35 #"                                  ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 35 #"                                  ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                        ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 9 #"make-food"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"G3"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-game"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"R\""
0 0 23 29 1 #"\n"
0 0 23 3 35 #"                                  ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 35 #"                                  ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                        ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 9 #"make-food"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"fn-for-game"
0 0 23 3 1 #" "
0 0 14 3 2 #"gm"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 12 #"fn-for-snake"
0 0 23 3 2 #" ("
0 0 14 3 10 #"game-snake"
0 0 23 3 1 #" "
0 0 14 3 2 #"gm"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";; ================="
0 0 23 29 1 #"\n"
0 0 17 3 20 #";; ================="
0 0 23 29 1 #"\n"
0 0 17 3 13 #";; Functions:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 15 #";; Game -> Game"
0 0 23 29 1 #"\n"
0 0 17 3 22 #";; start the game with"
0 0 23 29 1 #"\n"
0 7         301 62           0 0           0 49 0 23 3 1 #"("
0 0 14 3 4 #"main"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-game"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"R\""
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                             ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                             ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 36 #"                                   ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                         "
0 0 14 3 5 #"empty"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 9 #"make-food"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 3 #")))"
0           0 0 0 23 29 1 #"\n"
0 0 17 3 20 #";; no tests for main"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"main"
0 0 23 3 1 #" "
0 0 14 3 2 #"gm"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"big-bang"
0 0 23 3 1 #" "
0 0 14 3 2 #"gm"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 7 #"on-tick"
0 0 23 3 1 #" "
0 0 14 3 4 #"move"
0 0 23 3 1 #" "
0 0 14 3 10 #"GAME-SPEED"
0 0 23 3 2 #") "
0 0 17 3 14 #"; Game -> Game"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 7 #"to-draw"
0 0 23 3 1 #" "
0 0 14 3 11 #"render-game"
0 0 23 3 6 #")     "
0 0 17 3 15 #"; Game -> Image"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 6 #"on-key"
0 0 23 3 1 #" "
0 0 14 3 10 #"handle-key"
0 0 23 3 6 #")     "
0 0 17 3 23 #"; Game KeyEvent -> Game"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 9 #"stop-when"
0 0 23 3 1 #" "
0 0 14 3 8 #"game-end"
0 0 23 3 1 #" "
0 0 14 3 16 #"render-game-over"
0 0 23 3 9 #")))      "
0 0 17 3 17 #"; Game -> Boolean"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 15 #";; Game -> Game"
0 0 23 29 1 #"\n"
0 0 17 3 43 #";; updates game board to current game state"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 4 #"move"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-game"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"D\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 4 #"))) "
0 0 14 3 2 #"F1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 9 #"make-game"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"D\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 4 #"))) "
0 0 14 3 2 #"F1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"move"
0 0 23 3 1 #" "
0 0 14 3 2 #"gm"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"make-game"
0 0 23 3 2 #" ("
0 0 14 3 10 #"move-snake"
0 0 23 3 2 #" ("
0 0 14 3 10 #"game-snake"
0 0 23 3 1 #" "
0 0 14 3 2 #"gm"
0 0 23 3 3 #") ("
0 0 14 3 9 #"game-food"
0 0 23 3 1 #" "
0 0 14 3 2 #"gm"
0 0 23 3 4 #")) ("
0 0 14 3 9 #"game-food"
0 0 23 3 1 #" "
0 0 14 3 2 #"gm"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 22 #";; Snake Food -> Snake"
0 0 23 29 1 #"\n"
0 0 17 3 39 #";; moves snake based on snake direction"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"move-snake"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"R\""
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                      ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                      ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 45 #"                                            ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 45 #"                                            ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 45 #"                                            ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                          "
0 0 14 3 2 #"F1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"R\""
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"move-snake"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"D\""
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                      ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                      ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 45 #"                                            ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 45 #"                                            ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 45 #"                                            ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                          "
0 0 14 3 2 #"F1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"D\""
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"move-snake"
0 0 23 3 1 #" "
0 0 14 3 2 #"sn"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 11 #"intersects?"
0 0 23 3 2 #" ("
0 0 14 3 10 #"snake-head"
0 0 23 3 1 #" "
0 0 14 3 2 #"sn"
0 0 23 3 2 #") "
0 0 14 3 1 #"f"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 10 #"make-snake"
0 0 23 3 2 #" ("
0 0 14 3 9 #"snake-dir"
0 0 23 3 1 #" "
0 0 14 3 2 #"sn"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 9 #"move-head"
0 0 23 3 2 #" ("
0 0 14 3 10 #"snake-head"
0 0 23 3 1 #" "
0 0 14 3 2 #"sn"
0 0 23 3 3 #") ("
0 0 14 3 9 #"snake-dir"
0 0 23 3 1 #" "
0 0 14 3 2 #"sn"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 8 #"add-body"
0 0 23 3 2 #" ("
0 0 14 3 9 #"move-body"
0 0 23 3 2 #" ("
0 0 14 3 10 #"snake-body"
0 0 23 3 1 #" "
0 0 14 3 2 #"sn"
0 0 23 3 3 #") ("
0 0 14 3 10 #"snake-head"
0 0 23 3 1 #" "
0 0 14 3 2 #"sn"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 10 #"make-snake"
0 0 23 3 2 #" ("
0 0 14 3 9 #"snake-dir"
0 0 23 3 1 #" "
0 0 14 3 2 #"sn"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 9 #"move-head"
0 0 23 3 2 #" ("
0 0 14 3 10 #"snake-head"
0 0 23 3 1 #" "
0 0 14 3 2 #"sn"
0 0 23 3 3 #") ("
0 0 14 3 9 #"snake-dir"
0 0 23 3 1 #" "
0 0 14 3 2 #"sn"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 9 #"move-body"
0 0 23 3 2 #" ("
0 0 14 3 10 #"snake-body"
0 0 23 3 1 #" "
0 0 14 3 2 #"sn"
0 0 23 3 3 #") ("
0 0 14 3 10 #"snake-head"
0 0 23 3 1 #" "
0 0 14 3 2 #"sn"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 23 #";; Cell Food -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";; produces true if two cell intersect"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"intersects?"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 2 #" ("
0 0 14 3 6 #"cell-c"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #") ("
0 0 14 3 6 #"food-c"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 1 #"="
0 0 23 3 2 #" ("
0 0 14 3 6 #"cell-r"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #") ("
0 0 14 3 6 #"food-r"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 15 #";; Body -> Body"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";; adds thing to body"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"add-body"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 8 #"add-body"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 5 #"))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 25 #";; Cell Direction -> Cell"
0 0 23 29 1 #"\n"
0 0 17 3 49 #";; updates cell based on given direction on board"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"move-head"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 19 3 3 #"\"U\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"move-head"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 19 3 3 #"\"D\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"move-head"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 19 3 3 #"\"L\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"move-head"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 19 3 3 #"\"R\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"move-head"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 1 #"d"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"d"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"U\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 9 #"make-cell"
0 0 23 3 2 #" ("
0 0 14 3 6 #"cell-c"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 6 #"cell-r"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #") "
0 0 20 3 1 #"1"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"d"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"D\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 9 #"make-cell"
0 0 23 3 2 #" ("
0 0 14 3 6 #"cell-c"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 6 #"cell-r"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #") "
0 0 20 3 1 #"1"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"d"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"L\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 9 #"make-cell"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 6 #"cell-c"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #") "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 6 #"cell-r"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"d"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"R\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 9 #"make-cell"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 6 #"cell-c"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #") "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 6 #"cell-r"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 5 #"))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";; Body Cell -> Body"
0 0 23 29 1 #"\n"
0 0 17 3 32 #";; moves body by given head cell"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"move-body"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 4 #")) ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"move-body"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                               ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                               ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                               ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"move-body"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 4 #"head"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 4 #"head"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 4 #"head"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 9 #"move-body"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 6 #")))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 16 #";; Game -> Image"
0 0 23 29 1 #"\n"
0 0 17 3 57 #";; renders all objects on board according to given pixels"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"render-game"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-game"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"U\""
0 0 23 29 1 #"\n"
0 0 23 3 51 #"                                                  ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 51 #"                                                  ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 38 #"                                      "
0 0 14 3 2 #"F1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 11 #"place-image"
0 0 23 3 1 #" "
0 0 14 3 4 #"HEAD"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"3.5"
0 0 23 3 1 #" "
0 0 14 3 11 #"CELL-PIXELS"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"5.5"
0 0 23 3 1 #" "
0 0 14 3 11 #"CELL-PIXELS"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 11 #"place-image"
0 0 23 3 1 #" "
0 0 14 3 4 #"BODY"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                        ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"3.5"
0 0 23 3 1 #" "
0 0 14 3 11 #"CELL-PIXELS"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                        ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"4.5"
0 0 23 3 1 #" "
0 0 14 3 11 #"CELL-PIXELS"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                        ("
0 0 14 3 11 #"place-image"
0 0 23 3 1 #" "
0 0 14 3 4 #"FOOD"
0 0 23 29 1 #"\n"
0 0 23 3 54 #"                                                     ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"7.5"
0 0 23 3 1 #" "
0 0 14 3 11 #"CELL-PIXELS"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 54 #"                                                     ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"2.5"
0 0 23 3 1 #" "
0 0 14 3 11 #"CELL-PIXELS"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 53 #"                                                     "
0 0 14 3 3 #"MTS"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"render-game"
0 0 23 3 1 #" "
0 0 14 3 2 #"gm"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"render-snake"
0 0 23 3 2 #" ("
0 0 14 3 10 #"game-snake"
0 0 23 3 1 #" "
0 0 14 3 2 #"gm"
0 0 23 3 2 #") "
0 0 14 3 3 #"MTS"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 23 #";; Snake Image -> Image"
0 0 23 29 1 #"\n"
0 0 17 3 43 #";; draws snake on img from location of head"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 12 #"render-snake"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"U\""
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                        ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                        ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                            "
0 0 14 3 3 #"MTS"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 11 #"place-image"
0 0 23 3 1 #" "
0 0 14 3 4 #"HEAD"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"1.5"
0 0 23 3 1 #" "
0 0 14 3 11 #"CELL-PIXELS"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"2.5"
0 0 23 3 1 #" "
0 0 14 3 11 #"CELL-PIXELS"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 11 #"place-image"
0 0 23 3 1 #" "
0 0 14 3 4 #"BODY"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                        ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"1.5"
0 0 23 3 1 #" "
0 0 14 3 11 #"CELL-PIXELS"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                        ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"1.5"
0 0 23 3 1 #" "
0 0 14 3 11 #"CELL-PIXELS"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 40 #"                                        "
0 0 14 3 3 #"MTS"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"render-snake"
0 0 23 3 1 #" "
0 0 14 3 2 #"sn"
0 0 23 3 1 #" "
0 0 14 3 3 #"img"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 13 #"place-in-cell"
0 0 23 3 1 #" "
0 0 14 3 4 #"HEAD"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 10 #"snake-head"
0 0 23 3 1 #" "
0 0 14 3 2 #"sn"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 11 #"render-body"
0 0 23 3 2 #" ("
0 0 14 3 10 #"snake-body"
0 0 23 3 1 #" "
0 0 14 3 2 #"sn"
0 0 23 3 2 #") "
0 0 14 3 3 #"img"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 22 #";; Body Image -> Image"
0 0 23 29 1 #"\n"
0 0 17 3 31 #";; draws body of snake on image"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"render-body"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #")) "
0 0 14 3 3 #"MTS"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 11 #"place-image"
0 0 23 3 1 #" "
0 0 14 3 4 #"BODY"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"1.5"
0 0 23 3 1 #" "
0 0 14 3 11 #"CELL-PIXELS"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"1.5"
0 0 23 3 1 #" "
0 0 14 3 11 #"CELL-PIXELS"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                           "
0 0 14 3 3 #"MTS"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"render-body"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                 ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                           "
0 0 14 3 3 #"MTS"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 11 #"place-image"
0 0 23 3 1 #" "
0 0 14 3 4 #"BODY"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"2.5"
0 0 23 3 1 #" "
0 0 14 3 11 #"CELL-PIXELS"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"1.5"
0 0 23 3 1 #" "
0 0 14 3 11 #"CELL-PIXELS"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 11 #"place-image"
0 0 23 3 1 #" "
0 0 14 3 4 #"BODY"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                        ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"2.5"
0 0 23 3 1 #" "
0 0 14 3 11 #"CELL-PIXELS"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                        ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"2.5"
0 0 23 3 1 #" "
0 0 14 3 11 #"CELL-PIXELS"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 40 #"                                        "
0 0 14 3 3 #"MTS"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"render-body"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 3 #"img"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 13 #"place-in-cell"
0 0 23 3 1 #" "
0 0 14 3 4 #"BODY"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                        "
0 0 14 3 3 #"img"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 13 #"place-in-cell"
0 0 23 3 1 #" "
0 0 14 3 4 #"BODY"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 11 #"render-body"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 2 #") "
0 0 14 3 3 #"img"
0 0 23 3 5 #"))]))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 24 #";; Game KeyEvent -> Game"
0 0 23 29 1 #"\n"
0 0 17 3 46 #";; change snake direction based on key pressed"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"handle-key"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-game"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"U\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 2 #"B3"
0 0 23 3 2 #") "
0 0 14 3 2 #"F1"
0 0 23 3 2 #") "
0 0 19 3 4 #"\"up\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 9 #"make-game"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"U\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 2 #"B3"
0 0 23 3 2 #") "
0 0 14 3 2 #"F1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"handle-key"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-game"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"D\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 2 #"B3"
0 0 23 3 2 #") "
0 0 14 3 2 #"F1"
0 0 23 3 2 #") "
0 0 19 3 4 #"\"up\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 9 #"make-game"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"U\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 2 #"B3"
0 0 23 3 2 #") "
0 0 14 3 2 #"F1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"handle-key"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-game"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"U\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 2 #"B3"
0 0 23 3 2 #") "
0 0 14 3 2 #"F1"
0 0 23 3 2 #") "
0 0 19 3 6 #"\"down\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 9 #"make-game"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"D\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 2 #"B3"
0 0 23 3 2 #") "
0 0 14 3 2 #"F1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"handle-key"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-game"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"U\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 2 #"B3"
0 0 23 3 2 #") "
0 0 14 3 2 #"F1"
0 0 23 3 2 #") "
0 0 19 3 6 #"\"left\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 9 #"make-game"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"L\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 2 #"B3"
0 0 23 3 2 #") "
0 0 14 3 2 #"F1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"handle-key"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-game"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"U\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 2 #"B3"
0 0 23 3 2 #") "
0 0 14 3 2 #"F1"
0 0 23 3 2 #") "
0 0 19 3 7 #"\"right\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 9 #"make-game"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"R\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 2 #"B3"
0 0 23 3 2 #") "
0 0 14 3 2 #"F1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"handle-key"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-game"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"U\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 2 #"B3"
0 0 23 3 2 #") "
0 0 14 3 2 #"F1"
0 0 23 3 2 #") "
0 0 19 3 7 #"\"shift\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 9 #"make-game"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"U\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 2 #"B3"
0 0 23 3 2 #") "
0 0 14 3 2 #"F1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"handle-key"
0 0 23 3 1 #" "
0 0 14 3 2 #"gm"
0 0 23 3 1 #" "
0 0 14 3 2 #"ke"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"make-game"
0 0 23 3 2 #" ("
0 0 14 3 10 #"change-dir"
0 0 23 3 2 #" ("
0 0 14 3 10 #"game-snake"
0 0 23 3 1 #" "
0 0 14 3 2 #"gm"
0 0 23 3 2 #") "
0 0 14 3 2 #"ke"
0 0 23 3 3 #") ("
0 0 14 3 9 #"game-food"
0 0 23 3 1 #" "
0 0 14 3 2 #"gm"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 26 #";; Snake KeyEvent -> Snake"
0 0 23 29 1 #"\n"
0 0 17 3 59
#";; changes direction of snake head based on given direction"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"change-dir"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"U\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 2 #"B2"
0 0 23 3 2 #") "
0 0 19 3 4 #"\"up\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"U\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 2 #"B2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"change-dir"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"U\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 2 #"B2"
0 0 23 3 2 #") "
0 0 19 3 6 #"\"down\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"D\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 2 #"B2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"change-dir"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"U\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 2 #"B2"
0 0 23 3 2 #") "
0 0 19 3 6 #"\"left\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"L\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 2 #"B2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"change-dir"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"U\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 2 #"B2"
0 0 23 3 2 #") "
0 0 19 3 7 #"\"right\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"R\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 2 #"B2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"change-dir"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"D\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 2 #"B2"
0 0 23 3 2 #") "
0 0 19 3 7 #"\"right\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"R\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 2 #"B2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"change-dir"
0 0 23 3 1 #" "
0 0 14 3 2 #"sn"
0 0 23 3 1 #" "
0 0 14 3 2 #"ke"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"make-snake"
0 0 23 3 2 #" ("
0 0 14 3 13 #"get-direction"
0 0 23 3 1 #" "
0 0 14 3 2 #"ke"
0 0 23 3 2 #" ("
0 0 14 3 9 #"snake-dir"
0 0 23 3 1 #" "
0 0 14 3 2 #"sn"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"snake-head"
0 0 23 3 1 #" "
0 0 14 3 2 #"sn"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"snake-body"
0 0 23 3 1 #" "
0 0 14 3 2 #"sn"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 34 #";; KeyEvent Direction -> Direction"
0 0 23 29 1 #"\n"
0 0 17 3 67
#";; if KeyEvent is one of up/down/left/right, produces new direction"
0 0 23 29 1 #"\n"
0 0 17 3 40 #";; produces original direction otherwise"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 13 #"get-direction"
0 0 23 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"D\""
0 0 23 3 2 #") "
0 0 19 3 3 #"\"U\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 13 #"get-direction"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"L\""
0 0 23 3 2 #") "
0 0 19 3 3 #"\"D\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 13 #"get-direction"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"R\""
0 0 23 3 2 #") "
0 0 19 3 3 #"\"L\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 13 #"get-direction"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"U\""
0 0 23 3 2 #") "
0 0 19 3 3 #"\"R\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 13 #"get-direction"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"shift\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"U\""
0 0 23 3 2 #") "
0 0 19 3 3 #"\"U\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"get-direction"
0 0 23 3 1 #" "
0 0 14 3 2 #"ke"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 5 #"key=?"
0 0 23 3 1 #" "
0 0 14 3 2 #"ke"
0 0 23 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 23 3 2 #") "
0 0 19 3 3 #"\"U\""
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 5 #"key=?"
0 0 23 3 1 #" "
0 0 14 3 2 #"ke"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 23 3 2 #") "
0 0 19 3 3 #"\"D\""
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 5 #"key=?"
0 0 23 3 1 #" "
0 0 14 3 2 #"ke"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 23 3 2 #") "
0 0 19 3 3 #"\"L\""
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 5 #"key=?"
0 0 23 3 1 #" "
0 0 14 3 2 #"ke"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 23 3 2 #") "
0 0 19 3 3 #"\"R\""
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 14 3 3 #"dir"
0 0 23 3 3 #"]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 28 #";; Image Cell Image -> Image"
0 0 23 29 1 #"\n"
0 0 17 3 48 #";; place img in cell c given the board scene scn"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 13 #"place-in-cell"
0 0 23 3 1 #" "
0 0 14 3 4 #"HEAD"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 2 #") "
0 0 14 3 3 #"MTS"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 11 #"place-image"
0 0 23 3 1 #" "
0 0 14 3 4 #"HEAD"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"5.5"
0 0 23 3 1 #" "
0 0 14 3 11 #"CELL-PIXELS"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 3 #"6.5"
0 0 23 3 1 #" "
0 0 14 3 11 #"CELL-PIXELS"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                           "
0 0 14 3 3 #"MTS"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"place-in-cell"
0 0 23 3 1 #" "
0 0 14 3 3 #"img"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 3 #"scn"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 23 3 1 #" "
0 0 14 3 3 #"img"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 2 #" ("
0 0 14 3 6 #"cell-c"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #") "
0 0 14 3 11 #"CELL-PIXELS"
0 0 23 3 3 #") ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 11 #"CELL-PIXELS"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 2 #" ("
0 0 14 3 6 #"cell-r"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #") "
0 0 14 3 11 #"CELL-PIXELS"
0 0 23 3 3 #") ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 11 #"CELL-PIXELS"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 14 3 3 #"scn"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 18 #";; Game -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 41 #";; stop game when snake touching boundary"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 8 #"game-end"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-game"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"U\""
0 0 23 29 1 #"\n"
0 0 23 3 48 #"                                               ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 47 #"                                               "
0 0 14 3 2 #"B3"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 35 #"                                   "
0 0 14 3 2 #"F1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 8 #"game-end"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-game"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"R\""
0 0 23 29 1 #"\n"
0 0 23 3 48 #"                                               ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 14 3 10 #"BOARD-SIZE"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 47 #"                                               "
0 0 14 3 2 #"B3"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 35 #"                                   "
0 0 14 3 2 #"F1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"game-end"
0 0 23 3 1 #" "
0 0 14 3 2 #"gm"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 17 #"in-bounds--snake?"
0 0 23 3 2 #" ("
0 0 14 3 10 #"game-snake"
0 0 23 3 1 #" "
0 0 14 3 2 #"gm"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 19 #";; Snake -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 44 #";; produces true if snake is inside boundary"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 17 #"in-bounds--snake?"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"U\""
0 0 23 29 1 #"\n"
0 0 23 3 46 #"                                             ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 45 #"                                             "
0 0 14 3 2 #"B3"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 17 #"in-bounds--snake?"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"R\""
0 0 23 29 1 #"\n"
0 0 23 3 46 #"                                             ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 2 #"-1"
0 0 23 3 1 #" "
0 0 20 3 2 #"-1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 45 #"                                             "
0 0 14 3 2 #"B3"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 17 #"in-bounds--snake?"
0 0 23 3 1 #" "
0 0 14 3 2 #"sn"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 16 #"in-bounds--cell?"
0 0 23 3 2 #" ("
0 0 14 3 10 #"snake-head"
0 0 23 3 1 #" "
0 0 14 3 2 #"sn"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 18 #";; Cell -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 43 #";; produces true if cell is inside boundary"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 16 #"in-bounds--cell?"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 3 #")) "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 16 #"in-bounds--cell?"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 2 #"-1"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 3 #")) "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 16 #"in-bounds--cell?"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 2 #"-1"
0 0 23 3 3 #")) "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 16 #"in-bounds--cell?"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 14 3 10 #"BOARD-SIZE"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 3 #")) "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 16 #"in-bounds--cell?"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 14 3 10 #"BOARD-SIZE"
0 0 23 3 3 #")) "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 16 #"in-bounds--cell?"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 1 #"<"
0 0 23 3 1 #" "
0 0 20 3 2 #"-1"
0 0 23 3 2 #" ("
0 0 14 3 6 #"cell-c"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #") "
0 0 14 3 10 #"BOARD-SIZE"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 1 #"<"
0 0 23 3 1 #" "
0 0 20 3 2 #"-1"
0 0 23 3 2 #" ("
0 0 14 3 6 #"cell-r"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #") "
0 0 14 3 10 #"BOARD-SIZE"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 16 #";; Game -> Image"
0 0 23 29 1 #"\n"
0 0 17 3 27 #";; displays game over image"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 16 #"render-game-over"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-game"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-snake"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"U\""
0 0 23 29 1 #"\n"
0 0 23 3 56 #"                                                       ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 56 #"                                                       ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 43 #"                                           "
0 0 14 3 2 #"F1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 14 3 9 #"GAME-OVER"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 16 #"render-game-over"
0 0 23 3 1 #" "
0 0 14 3 2 #"gm"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 14 3 9 #"GAME-OVER"
0 0 23 3 1 #")"
0           0
